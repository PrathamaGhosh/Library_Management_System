import java.sql.*;
import Project.ConnectionProvider;
import java.util.Vector;
//import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author pgkpa
 */
public class statistics extends javax.swing.JFrame {

    /**
     * Creates new form statistics
     */
    public statistics() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(255, 204, 204));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 0));
        jLabel1.setText("Issue  Details");

        jLabel2.setBackground(new java.awt.Color(255, 204, 204));
        jLabel2.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 51, 0));
        jLabel2.setText("Return Details");

        jButton1.setBackground(new java.awt.Color(204, 255, 255));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton1.setText("Close");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable3.setBackground(new java.awt.Color(255, 255, 204));
        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable3);

        jTable4.setBackground(new java.awt.Color(204, 255, 204));
        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(jTable4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(98, 98, 98))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 824, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(309, 309, 309)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(302, 302, 302)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(16, 16, 16))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
//        try{
//             Connection con=ConnectionProvider.getCon();
//            Statement st=con.createStatement();
//            //ResultSet rs=st.executeQuery("select issue.studentID,student.name,issue.bookID,book.name,issue.issueDate,issue.dueDate from student inner join book inner join issue where book.bookID=issue.bookID and student.studentID=issue.studentID and issue.returnBook='NO'");
//            //jTable1.setModel(DBUtils.resultSetTableModel(rs));
//            ResultSet rs1=st.executeQuery("SELECT issue.studentID,student.name,issue.bookID,book.name,issue.issueDate,issue.dueDate FROM student INNER JOIN book INNER JOIN issue ON book.bookID=issue.bookID and student.studentID=issue.studentID WHERE issue.returnBook='YES'");
//            ResultSetMetaData rs2=rs1.getMetaData();
//            DefaultTableModel model=(DefaultTableModel)jTable3.getModel();
//           // ResultSet rs1=st.executeQuery("select issue.studentID,student.name,issue.bookID,book.name,issue.issueDate,issue.dueDate from student inner join book inner join issue where book.bookID=issue.bookID and student.studentID=issue.studentID and issue.returnBook='YES'");
//           // jTable2.setModel(DBUtils.resultSetTableModel(rs1));
//           
//           //------------
//            ResultSet rs3=st.executeQuery("SELECT issue.studentID,student.name,issue.bookID,book.name,issue.issueDate,issue.dueDate FROM student INNER JOIN book INNER JOIN issue ON book.bookID=issue.bookID and student.studentID=issue.studentID WHERE issue.returnBook='NO'");
//            ResultSetMetaData rs4=rs3.getMetaData();
//            DefaultTableModel model1=(DefaultTableModel)jTable4.getModel();
//           
//           int col=rs2.getColumnCount();
//           int col1=rs4.getColumnCount();
//          
//           String[] colName=new String[col];
//            String[] colName1=new String[col1];
//           for(int i=0;i<col;i++)
//           {
//             colName[i]=rs2.getColumnName(i+1);
//             model.setColumnIdentifiers(colName);
//           }
//           //-----------
//           
//            for(int i=0;i<col1;i++)
//           {
//             colName1[i]=rs4.getColumnName(i+1);
//             model1.setColumnIdentifiers(colName1);
//             
//           }
////             //String id1,name1,bookId1,bookName1,issueDate1,dueDate1;
//////             //int bookId1;
//////             //int id1;
//////          // model.setRowCount(0);
////////             while(rs1.next()){
////////                 Vector data=new Vector();
////////                 for(int j=1;j<=col;j++){
////////                     data.add(rs1.getString("studentID"));
////////                 data.add(rs1.getString("name"));
////////                 data.add(rs1.getString("bookID"));
////////                 data.add(rs1.getString("name"));
////////                // name1=rs1.getString(5);
////////                 data.add(rs1.getString("issueDate"));
////////                 data.add(rs1.getString("dueDate"));
////////                 }
////////                 
////////               //  String[] row={id1,name1,bookId1,bookName1,issueDate1,dueDate1};
////////                // model.addRow(data);
////////                 System.out.print(data);
////////                 
////////             }
//                  // System.out.print(rs1.getString(1));
//                  //-------------
//                 String id = null,name = null,bookId = null,bookName = null,issueDate = null,dueDate = null;
//                 while(rs3.next()){
//                 
//                 id=rs3.getString(1);
//                 name=rs3.getString(2);
//                 bookId=rs3.getString(3);
//                 bookName=rs3.getString(4);
//                // name1=rs3.getString(5);
//                 issueDate=rs3.getString(5);
//                   dueDate=rs3.getString(6);
//                 
//              
//             }
//                 String[] row={id,name,bookId,bookName,issueDate,dueDate};
//                 model1.addRow(row);
//                 
//        //--------------
//                while(rs1.next()){
//                 //String id,name,bookId,bookName,issueDate,dueDate;
//                 id=rs1.getString(1);
//                 name=rs1.getString(2);
//                 bookId=rs1.getString(3);
//                 bookName=rs1.getString(4);
//                
//                // name1=rs3.getString(5);
//                 issueDate=rs1.getString(5);
//                   dueDate=rs1.getString(6);
//
//           }
//                 String[] row1={id,name,bookId,bookName,issueDate,dueDate};
//                 model.addRow(row1);
////                 
////                 
////             
//           //}
//    
//           //------------------------------------------------
//           
//         
//            st.close();
//            con.close();
//
//           
//           
//           
//           
//  

//------------------------------------------------------

            
   //     }
//        catch(Exception e){
//            JOptionPane.showMessageDialog(null,"Connection Error..");  
//        }
        
        
//-----------------------------------
try  {
        Connection con=ConnectionProvider.getCon();
    Statement st = con.createStatement();
        ResultSet rs = st.executeQuery("SELECT issue.studentID, student.name, issue.bookID, book.name, issue.issueDate, issue.dueDate FROM student INNER JOIN book INNER JOIN issue ON book.bookID = issue.bookID AND student.studentID = issue.studentID WHERE issue.returnBook = 'NO'");
        jTable3.setModel(buildTableModel(rs));
        ResultSet rs1 = st.executeQuery("SELECT issue.studentID, student.name, issue.bookID, book.name, issue.issueDate, issue.dueDate FROM student INNER JOIN book INNER JOIN issue ON book.bookID = issue.bookID AND student.studentID = issue.studentID WHERE issue.returnBook = 'YES'");
        jTable4.setModel(buildTableModel(rs1));
    } catch (Exception e) {
        e.printStackTrace();
    }
      

    }                                   
    public static DefaultTableModel buildTableModel(ResultSet rs) throws SQLException {
    ResultSetMetaData metaData = rs.getMetaData();

    // Get column names
    int columnCount = metaData.getColumnCount();
    Vector<String> columnNames = new Vector<>();
    for (int column = 1; column <= columnCount; column++) {
        columnNames.add(metaData.getColumnName(column));
    }

    // Get row data
    Vector<Vector<Object>> data = new Vector<>();
    while (rs.next()) {
        Vector<Object> row = new Vector<>();
        for (int column = 1; column <= columnCount; column++) {
            row.add(rs.getObject(column));
        }
        data.add(row);
    }

    return new DefaultTableModel(data, columnNames);

    }//GEN-LAST:event_formComponentShown

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(statistics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(statistics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(statistics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(statistics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new statistics().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    // End of variables declaration//GEN-END:variables
}
